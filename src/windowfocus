#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Instant window focus script.

Environment: Python 2.5 or 2.6
Licence: GPL version 2
Author: tkykhs@gmail.com

FORMAT:
$ windowfocus <query>

INTERPRETATION.

1. If <query> matches any of QUERY_TRANSLATION's key, its value becomes the
condition to be matched against each window.

2. If <query> is 'unmatched', then the program tries to capture the window that
doesn't match any of the conditions in QUERY_TRANSLATION.

3. If <query> matches none of QUERY_TRANSLATION's key or 'unmatched', then
DEFAULT_CONDITION gets used as the condition.

EXAMPLES:
$ windowfocus firefox
$ windowfocus unmatched
"""
import sys
import gtk, wnck
from itertools import ifilter

QUERY_TRANSLATION = {
  'firefox'        : lambda e: e.appname == 'Firefox',
  'emacs'          : lambda e: e.appname == 'emacs' and e.title != 'child',
  'thunderbird'    : lambda e: e.appname == 'Thunderbird',
  'pidgin'         : lambda e: e.appname == 'Pidgin',
  'xournal'        : lambda e: e.appname == 'Xournal',
  'terminal'       : lambda e: e.appname == 'Terminal',
  # 'tws'            : match_condition('^jclient'),
  'anzan'          : lambda e: e.appname == 'emacs' and e.title == 'anzan',
  }
DEFAULT_CONDITION = lambda e: e.query.lower() in e.appname.lower()

def exists(predicate, seq):
  for x in ifilter(predicate, seq):
    return x
  return False
UNMATCHED_CONDITION = lambda e: \
    not exists(lambda f: f(e), QUERY_TRANSLATION.values()) and \
    e.title not in ('Untitled window', 'child', 'Top Expanded Edge Panel', 'x-nautilus-desktop')


class Struct:
  def __init__(self, **entries):
    self.__dict__.update(entries)
  def isdefined(self, var_name):
    self.__dict__.__contains__(var_name)
  def __cmp__(self, other):
    if isinstance(other, Struct):
      return cmp(self.__dict__, other.__dict__)
    else:
      return cmp(self.__dict__, other)
  def __getitem__(self, key):
    return self.__dict__[key]
  def __setitem__(self, key, val):
    self.__dict__[key] = val


def get_windowlist():
  screen = wnck.screen_get_default()
  while gtk.events_pending():
    gtk.main_iteration()
  return screen.get_windows()

def get_condition(query):
  if query == 'unmatched':
    return UNMATCHED_CONDITION
  if query in QUERY_TRANSLATION:
    return QUERY_TRANSLATION[query]
  return DEFAULT_CONDITION


if __name__  == '__main__':
  
  if len(sys.argv) != 2:
    sys.stderr.write( 'Usage: %s <query>\n' % sys.argv[0] )
    sys.exit(1)
  
  query = sys.argv[1]

  window_list = get_windowlist()
  condition = get_condition(query)
  for window in window_list:
    e = Struct(title=window.get_name(),
               appname=window.get_application().get_name(),
               query=query)
    # print e.title, e.appname
    if condition(e):
      window.activate(gtk.get_current_event_time())    ## focus
      break
